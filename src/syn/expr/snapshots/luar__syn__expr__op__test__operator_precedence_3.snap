---
source: src/syn/expr/op.rs
expression: expression
---
BinaryOperator {
    lhs: BinaryOperator {
        lhs: Number(
            NumberLiteral(
                1.0,
            ),
        ),
        op: LessOrEquals,
        rhs: BinaryOperator {
            lhs: BinaryOperator {
                lhs: BinaryOperator {
                    lhs: Number(
                        NumberLiteral(
                            2.0,
                        ),
                    ),
                    op: And,
                    rhs: Number(
                        NumberLiteral(
                            3.0,
                        ),
                    ),
                },
                op: Plus,
                rhs: UnaryOperator {
                    op: Not,
                    exp: BinaryOperator {
                        lhs: Number(
                            NumberLiteral(
                                4.0,
                            ),
                        ),
                        op: Mul,
                        rhs: Number(
                            NumberLiteral(
                                5.0,
                            ),
                        ),
                    },
                },
            },
            op: Exp,
            rhs: Number(
                NumberLiteral(
                    6.0,
                ),
            ),
        },
    },
    op: GreaterOrEquals,
    rhs: BinaryOperator {
        lhs: BinaryOperator {
            lhs: Number(
                NumberLiteral(
                    7.0,
                ),
            ),
            op: Minus,
            rhs: BinaryOperator {
                lhs: UnaryOperator {
                    op: Minus,
                    exp: Number(
                        NumberLiteral(
                            8.0,
                        ),
                    ),
                },
                op: Div,
                rhs: BinaryOperator {
                    lhs: BinaryOperator {
                        lhs: Number(
                            NumberLiteral(
                                9.0,
                            ),
                        ),
                        op: Or,
                        rhs: Number(
                            NumberLiteral(
                                10.0,
                            ),
                        ),
                    },
                    op: NotEquals,
                    rhs: Number(
                        NumberLiteral(
                            11.0,
                        ),
                    ),
                },
            },
        },
        op: Concat,
        rhs: Number(
            NumberLiteral(
                12.0,
            ),
        ),
    },
}
